=begin
#ISBM 2.0

#An OpenAPI specification for the ISBM 2.0 RESTful interface.

The version of the OpenAPI document: 2.0
Contact: info@mimosa.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for ISBMRestAdaptor::Session
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'Session' do
  before do
    # run before each test
    @instance = ISBMRestAdaptor::Session.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of Session' do
    it 'should create an instance of Session' do
      expect(@instance).to be_instance_of(ISBMRestAdaptor::Session)
    end
  end
  describe 'test attribute "id"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "session_type"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "listener_url"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "topics"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
    it 'should work for no "topics" with empty session type' do
      @instance.topics = []
      expect(@instance.topics).to eq []
      expect(@instance.valid?).to be true
    end
    it 'should not work for empty "topics" with subscriber session type' do
      @instance.topics = []
      @instance.session_type = ISBMRestAdaptor::SessionType::PUBLICATION_CONSUMER
      expect(@instance.valid?).to be false
      expect(@instance.list_invalid_properties.length).to be 1
      @instance.topics = nil

      expect { @instance.topics = [] }.to raise_error ArgumentError
      expect(@instance.topics).to be nil
    end
    it 'should not work for empty "topics" with publisher session type' do
      @instance.topics = []
      @instance.session_type = ISBMRestAdaptor::SessionType::PUBLICATION_PROVIDER
      expect(@instance.valid?).to be false
      expect(@instance.list_invalid_properties.length).to be 1
      @instance.topics = nil

      expect { @instance.topics = [] }.to raise_error ArgumentError
      expect(@instance.topics).to be nil
    end
    it 'should not work for empty "topics" with request provider session type' do
      @instance.topics = []
      @instance.session_type = ISBMRestAdaptor::SessionType::REQUEST_PROVIDER
      expect(@instance.valid?).to be false
      expect(@instance.list_invalid_properties.length).to be 1
      @instance.topics = nil

      expect { @instance.topics = [] }.to raise_error ArgumentError
      expect(@instance.topics).to be nil
    end
    it 'should not work for empty "topics" with request consumer session type' do
      @instance.topics = []
      @instance.session_type = ISBMRestAdaptor::SessionType::REQUEST_CONSUMER
      expect(@instance.valid?).to be false
      expect(@instance.list_invalid_properties.length).to be 1
      @instance.topics = nil

      expect { @instance.topics = [] }.to raise_error ArgumentError
      expect(@instance.topics).to be nil
    end
    it 'should work for at least 1 "topics" with subscriber session type' do
      @instance.session_type = ISBMRestAdaptor::SessionType::PUBLICATION_CONSUMER
      @instance.topics = ['Topic 1']
      expect(@instance.topics).to match_array ['Topic 1']
      expect(@instance.valid?).to be true
    end
    it 'should work for at least 1 "topics" with request provider session type' do
      @instance.session_type = ISBMRestAdaptor::SessionType::REQUEST_PROVIDER
      @instance.topics = ['Topic 1']
      expect(@instance.topics).to match_array ['Topic 1']
      expect(@instance.valid?).to be true
    end
    it 'should not work for at least 1 "topics" with publisher session type' do
      @instance.topics = ['Topic 1']
      @instance.session_type = ISBMRestAdaptor::SessionType::PUBLICATION_PROVIDER
      expect(@instance.valid?).to be false
      expect(@instance.list_invalid_properties.length).to be 1
      @instance.topics = nil

      expect { @instance.topics = ['Topic 1'] }.to raise_error ArgumentError
      expect(@instance.topics).to be nil
    end
    it 'should work for at least 1 "topics" with request consumer session type' do
      @instance.topics = ['Topic 1']
      @instance.session_type = ISBMRestAdaptor::SessionType::REQUEST_CONSUMER
      expect(@instance.valid?).to be false
      expect(@instance.list_invalid_properties.length).to be 1
      @instance.topics = nil

      expect { @instance.topics = ['Topic 1'] }.to raise_error ArgumentError
      expect(@instance.topics).to be nil
    end
  end

  describe 'test attribute "x_path_expression"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "x_path_namespace"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
