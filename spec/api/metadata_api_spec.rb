=begin
#ws-ISBM

#A prototype OpenAPI specification for the ws-ISBM RESTful interface.

OpenAPI spec version: 0.0.1
Contact: info@mimosa.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta2

=end

require 'spec_helper'
require 'json'

# Unit tests for IsbmRestAdaptor::MetadataApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'MetadataApi', :vcr do
  include_context 'client_config'
  before do
    # run before each test
    @instance = IsbmRestAdaptor::MetadataApi.new(IsbmRestAdaptor::ApiClient.new(client_config))
  end

  after do
    # run after each test
  end

  describe 'test an instance of MetadataApi' do
    it 'should create an instance of MetadataApi' do
      expect(@instance).to be_instance_of(IsbmRestAdaptor::MetadataApi)
    end
  end

  # unit tests for get_metadata
  # Get metadata from the root of the API
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'get_metadata test' do
    # v1.9.3 does not recognize the symbolize_names parameter
    let(:expected_metadata) { YAML.safe_load(File.read(File.expand_path('../../schemas/isbm_complete.yml', File.dirname(__FILE__))), symbolize_names: true) }
    let(:api_metadata) { @instance.get_metadata }

    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      expect(api_metadata[:info].to_json).to eq((expected_metadata[:info]||expected_metadata['info']).to_json)
      expect(api_metadata[:tags].to_json).to eq((expected_metadata[:tags]||expected_metadata['tags']).to_json)
      expect(api_metadata[:paths].to_json).to eq((expected_metadata[:paths]||expected_metadata['paths']).to_json)
      expect(api_metadata[:components].to_json).to eq((expected_metadata[:components]||expected_metadata['components']).to_json)

      # Servers and security may differ for a specific ISBM implementation
      # expect(api_metadata[:servers].to_json).to eq(expected_metadata[:servers].to_json)
      # expect(api_metadata[:security].to_json).to eq(expected_metadata[:security].to_json)
    end
  end

end
