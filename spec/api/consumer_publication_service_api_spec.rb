=begin
#ws-ISBM

#A prototype OpenAPI specification for the ws-ISBM RESTful interface.

OpenAPI spec version: 0.0.1
Contact: info@mimosa.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta2

=end

require 'spec_helper'
require 'json'

# Unit tests for ISBMRestAdaptor::ConsumerPublicationServiceApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ConsumerPublicationServiceApi' do
  before do
    # run before each test
    @instance = ISBMRestAdaptor::ConsumerPublicationServiceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ConsumerPublicationServiceApi' do
    it 'should create an instance of ConsumerPublicationServiceApi' do
      expect(@instance).to be_instance_of(ISBMRestAdaptor::ConsumerPublicationServiceApi)
    end
  end

  # unit tests for close_session
  # Closes a session.
  # Closes a session of any type. **Note** this diverges from the SOAP API in that it provides a single path for sessions of all types. The type of session is still known upon creation and the different operations can still only be performed on sessions of the correct type. All unexpired messages that have been posted during the session will be expired.
  # @param session_id The identifier of the session to be accessed (retrieved, deleted, modified, etc.)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'close_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for open_subscription_session
  # Opens a subscription session for a channel.
  # @param channel_id The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)
  # @param [Hash] opts the optional parameters
  # @option opts [Session] :session The configuration of the subscription session, i.e., topic filtering, content-filtering, and notication listener address
  # @return [Session]
  describe 'open_subscription_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_publication
  # Returns the first non-expired publication message or a previously read expired message that satisfies the session message filters.
  # @param session_id The identifier of the session to which the publication was posted.
  # @param [Hash] opts the optional parameters
  # @return [Hash<String, Object>]
  describe 'read_publication test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_publication
  # Removes the first, if any, publication message in the subscription queue.
  # @param session_id The identifier of the session to which the publication was posted.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_publication test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
