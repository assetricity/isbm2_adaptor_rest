=begin
#ISBM 2.0

#An OpenAPI specification for the ISBM 2.0 RESTful interface.

The version of the OpenAPI document: 2.0
Contact: info@mimosa.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

# Note this has been enhanced with the use of the session register 
# for notification support.

require 'cgi'

module IsbmRestAdaptor
  class ConsumerRequestServiceApi < ApplicationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Closes a session.
    # Closes a session of any type. All unexpired messages that have been posted during the session will be expired. ***Note*** This interface is shared by Close Publication Session, Close Subscription Session, Close Provider Request Session, and Close Consumer Request Session.
    # @param session_id [String] The identifier of the session to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def close_session(session_id, opts = {})
      close_session_with_http_info(session_id, opts)
      nil
    end

    # Closes a session.
    # Closes a session of any type. All unexpired messages that have been posted during the session will be expired. ***Note*** This interface is shared by Close Publication Session, Close Subscription Session, Close Provider Request Session, and Close Consumer Request Session.
    # @param session_id [String] The identifier of the session to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def close_session_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumerRequestServiceApi.close_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ConsumerRequestServiceApi.close_session"
      end
      # resource path
      local_var_path = '/sessions/{session-id}'.sub('{' + 'session-id' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['username_password']

      new_options = opts.merge(
        :operation => :"ConsumerRequestServiceApi.close_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumerRequestServiceApi#close_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      @api_client.config.session_register.delete(session_id)
      return data, status_code, headers
    end

    # Expires a posted request message.
    # @param session_id [String] The identifier of the session to which the request message was posted.
    # @param message_id [String] The identifier of the posted request.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def expire_request(session_id, message_id, opts = {})
      expire_request_with_http_info(session_id, message_id, opts)
      nil
    end

    # Expires a posted request message.
    # @param session_id [String] The identifier of the session to which the request message was posted.
    # @param message_id [String] The identifier of the posted request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def expire_request_with_http_info(session_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumerRequestServiceApi.expire_request ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ConsumerRequestServiceApi.expire_request"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling ConsumerRequestServiceApi.expire_request"
      end
      # resource path
      local_var_path = '/sessions/{session-id}/requests/{message-id}'.sub('{' + 'session-id' + '}', CGI.escape(session_id.to_s)).sub('{' + 'message-id' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['username_password']

      new_options = opts.merge(
        :operation => :"ConsumerRequestServiceApi.expire_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumerRequestServiceApi#expire_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Opens a consumer request session for a channel for posting requests and reading responses.
    # @param channel_uri [String] The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [Session] :session The configuration of the consumer request session, i.e., optional notication listener address. Only the ListenerURL is to be provided (if desired).
    # @return [Session]
    def open_consumer_request_session(channel_uri, opts = {})
      data, _status_code, _headers = open_consumer_request_session_with_http_info(channel_uri, opts)
      data
    end

    # Opens a consumer request session for a channel for posting requests and reading responses.
    # @param channel_uri [String] The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [Session] :session The configuration of the consumer request session, i.e., optional notication listener address. Only the ListenerURL is to be provided (if desired).
    # @return [Array<(Session, Integer, Hash)>] Session data, response status code and response headers
    def open_consumer_request_session_with_http_info(channel_uri, opts = {})
      # We ensure there is always an object, as the specification requires it.
      opts[:session] = IsbmRestAdaptor::Session.new unless opts.has_key? :session

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumerRequestServiceApi.open_consumer_request_session ...'
      end
      # verify the required parameter 'channel_uri' is set
      if @api_client.config.client_side_validation && channel_uri.nil?
        fail ArgumentError, "Missing the required parameter 'channel_uri' when calling ConsumerRequestServiceApi.open_consumer_request_session"
      end
      # resource path
      local_var_path = '/channels/{channel-uri}/consumer-request-sessions'.sub('{' + 'channel-uri' + '}', CGI.escape(channel_uri.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'session'])

      # return_type
      return_type = opts[:debug_return_type] || 'Session'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['username_password']

      new_options = opts.merge(
        :operation => :"ConsumerRequestServiceApi.open_consumer_request_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumerRequestServiceApi#open_consumer_request_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      # update the data with the implicit and provided values
      # (server returns only the ID)
      data.session_type = SessionType::REQUEST_CONSUMER
      data.build_from_hash(opts[:session].to_hash) unless opts[:session].nil?
      @api_client.config.session_register << data
      return data, status_code, headers
    end

    # Posts a request message on a channel.
    # @param session_id [String] The identifier of the session to which the message will/is posted.
    # @param [Hash] opts the optional parameters
    # @option opts [Message] :message The Message to be published Only MessageContent, Topic, and Expiry are allowed in the request body. Although &#x60;topics&#x60; is an array, at most 1 value is allowed.
    # @return [Message]
    def post_request(session_id, opts = {})
      data, _status_code, _headers = post_request_with_http_info(session_id, opts)
      data
    end

    # Posts a request message on a channel.
    # @param session_id [String] The identifier of the session to which the message will/is posted.
    # @param [Hash] opts the optional parameters
    # @option opts [Message] :message The Message to be published Only MessageContent, Topic, and Expiry are allowed in the request body. Although &#x60;topics&#x60; is an array, at most 1 value is allowed.
    # @return [Array<(Message, Integer, Hash)>] Message data, response status code and response headers
    def post_request_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumerRequestServiceApi.post_request ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ConsumerRequestServiceApi.post_request"
      end
      # resource path
      local_var_path = '/sessions/{session-id}/requests'.sub('{' + 'session-id' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'message'])

      # return_type
      return_type = opts[:debug_return_type] || 'Message'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['username_password']

      new_options = opts.merge(
        :operation => :"ConsumerRequestServiceApi.post_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumerRequestServiceApi#post_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      # update the data with the implicit and provided values
      # (server returns only the ID)
      data.message_type = MessageType::REQUEST
      data.build_from_hash(opts[:message].to_hash)
      return data, status_code, headers
    end

    # Returns the first response message, if any, in the session message queue associated with the request.
    # @param session_id [String] The identifier of the session at which the response message was recieved.
    # @param request_id [String] The identifier of the origianal request for the response.
    # @param [Hash] opts the optional parameters
    # @return [Message]
    def read_response(session_id, request_id, opts = {})
      data, _status_code, _headers = read_response_with_http_info(session_id, request_id, opts)
      data
    end

    # Returns the first response message, if any, in the session message queue associated with the request.
    # @param session_id [String] The identifier of the session at which the response message was recieved.
    # @param request_id [String] The identifier of the origianal request for the response.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Message, Integer, Hash)>] Message data, response status code and response headers
    def read_response_with_http_info(session_id, request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumerRequestServiceApi.read_response ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ConsumerRequestServiceApi.read_response"
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling ConsumerRequestServiceApi.read_response"
      end
      # resource path
      local_var_path = '/sessions/{session-id}/requests/{request-id}/response'.sub('{' + 'session-id' + '}', CGI.escape(session_id.to_s)).sub('{' + 'request-id' + '}', CGI.escape(request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Message'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['username_password']

      new_options = opts.merge(
        :operation => :"ConsumerRequestServiceApi.read_response",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumerRequestServiceApi#read_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      # update the data with the implicit values
      # (server returns only the ID)
      data.message_type = MessageType::RESPONSE
      data.request_message_id = request_id
      data.build_from_hash(opts[:message].to_hash) unless opts[:message].nil?
      return data, status_code, headers
    end

    # Deletes the first response message, if any, in the session message queue associated with the request.
    # @param session_id [String] The identifier of the session at which the response message was recieved.
    # @param request_id [String] The identifier of the origianal request for the response.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_response(session_id, request_id, opts = {})
      remove_response_with_http_info(session_id, request_id, opts)
      nil
    end

    # Deletes the first response message, if any, in the session message queue associated with the request.
    # @param session_id [String] The identifier of the session at which the response message was recieved.
    # @param request_id [String] The identifier of the origianal request for the response.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_response_with_http_info(session_id, request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumerRequestServiceApi.remove_response ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ConsumerRequestServiceApi.remove_response"
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling ConsumerRequestServiceApi.remove_response"
      end
      # resource path
      local_var_path = '/sessions/{session-id}/requests/{request-id}/response'.sub('{' + 'session-id' + '}', CGI.escape(session_id.to_s)).sub('{' + 'request-id' + '}', CGI.escape(request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['username_password']

      new_options = opts.merge(
        :operation => :"ConsumerRequestServiceApi.remove_response",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumerRequestServiceApi#remove_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
