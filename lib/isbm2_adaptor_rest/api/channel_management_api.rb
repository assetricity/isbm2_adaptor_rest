=begin
#ISBM 2.0

#An OpenAPI specification for the ISBM 2.0 RESTful interface.

The version of the OpenAPI document: 2.0
Contact: info@mimosa.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

# Note that 'request_body' parameter for adding/removing security tokens
# has been renamed to 'security_tokens' to better indicate the content.

require 'cgi'

module ISBMRestAdaptor
  class ChannelManagementApi < ApplicationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds security tokens to a channel.
    # @param channel_uri [String] The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SecurityToken|UsernameToken|Hash>] :security_tokens The SecurityTokens to add.
    # @return [nil]
    def add_security_tokens(channel_uri, opts = {})
      add_security_tokens_with_http_info(channel_uri, opts)
      nil
    end

    # Adds security tokens to a channel.
    # @param channel_uri [String] The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SecurityToken|UsernameToken|Hash>] :security_tokens The SecurityTokens to add.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_security_tokens_with_http_info(channel_uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelManagementApi.add_security_tokens ...'
      end
      # verify the required parameter 'channel_uri' is set
      if @api_client.config.client_side_validation && channel_uri.nil?
        fail ArgumentError, "Missing the required parameter 'channel_uri' when calling ChannelManagementApi.add_security_tokens"
      end
      if @api_client.config.client_side_validation && !opts[:'security_tokens'].nil? && opts[:'security_tokens'].length < 1
        fail ArgumentError, 'invalid value for "opts[:"security_tokens"]" when calling ChannelManagementApi.add_security_tokens, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/channels/{channel-uri}/security-tokens'.sub('{' + 'channel-uri' + '}', CGI.escape(channel_uri.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'security_tokens'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['username_password']

      new_options = opts.merge(
        :operation => :"ChannelManagementApi.add_security_tokens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelManagementApi#add_security_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new channel with the specified URI path fragment.
    # @param [Hash] opts the optional parameters
    # @option opts [Channel] :channel The Channel to create
    # @return [Channel]
    def create_channel(opts = {})
      data, _status_code, _headers = create_channel_with_http_info(opts)
      data
    end

    # Create a new channel with the specified URI path fragment.
    # @param [Hash] opts the optional parameters
    # @option opts [Channel] :channel The Channel to create
    # @return [Array<(Channel, Integer, Hash)>] Channel data, response status code and response headers
    def create_channel_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelManagementApi.create_channel ...'
      end
      # resource path
      local_var_path = '/channels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'channel'])

      # return_type
      return_type = opts[:debug_return_type] || 'Channel'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChannelManagementApi.create_channel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelManagementApi#create_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the Channel specified by 'channel-uri'
    # @param channel_uri [String] The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_channel(channel_uri, opts = {})
      delete_channel_with_http_info(channel_uri, opts)
      nil
    end

    # Delete the Channel specified by &#39;channel-uri&#39;
    # @param channel_uri [String] The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_channel_with_http_info(channel_uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelManagementApi.delete_channel ...'
      end
      # verify the required parameter 'channel_uri' is set
      if @api_client.config.client_side_validation && channel_uri.nil?
        fail ArgumentError, "Missing the required parameter 'channel_uri' when calling ChannelManagementApi.delete_channel"
      end
      # resource path
      local_var_path = '/channels/{channel-uri}'.sub('{' + 'channel-uri' + '}', CGI.escape(channel_uri.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['username_password']

      new_options = opts.merge(
        :operation => :"ChannelManagementApi.delete_channel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelManagementApi#delete_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the Channel identified by 'channel-uri'
    # @param channel_uri [String] The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @return [Channel]
    def get_channel(channel_uri, opts = {})
      data, _status_code, _headers = get_channel_with_http_info(channel_uri, opts)
      data
    end

    # Retrieve the Channel identified by &#39;channel-uri&#39;
    # @param channel_uri [String] The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Channel, Integer, Hash)>] Channel data, response status code and response headers
    def get_channel_with_http_info(channel_uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelManagementApi.get_channel ...'
      end
      # verify the required parameter 'channel_uri' is set
      if @api_client.config.client_side_validation && channel_uri.nil?
        fail ArgumentError, "Missing the required parameter 'channel_uri' when calling ChannelManagementApi.get_channel"
      end
      # resource path
      local_var_path = '/channels/{channel-uri}'.sub('{' + 'channel-uri' + '}', CGI.escape(channel_uri.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Channel'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['username_password']

      new_options = opts.merge(
        :operation => :"ChannelManagementApi.get_channel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelManagementApi#get_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all the channels, subject to security permissions.
    # @param [Hash] opts the optional parameters
    # @return [Array<Channel>]
    def get_channels(opts = {})
      data, _status_code, _headers = get_channels_with_http_info(opts)
      data
    end

    # Retrieve all the channels, subject to security permissions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Channel>, Integer, Hash)>] Array<Channel> data, response status code and response headers
    def get_channels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelManagementApi.get_channels ...'
      end
      # resource path
      local_var_path = '/channels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Channel>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['username_password']

      new_options = opts.merge(
        :operation => :"ChannelManagementApi.get_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelManagementApi#get_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes security tokens from a channel.
    # @param channel_uri [String] The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Hash>] :security_tokens The security tokens to remove: each token must be specified in full to be removed, i.e., specifying only the username of a UsernamePassword token is insufficient.
    # @return [nil]
    def remove_security_tokens(channel_uri, opts = {})
      remove_security_tokens_with_http_info(channel_uri, opts)
      nil
    end

    # Removes security tokens from a channel.
    # @param channel_uri [String] The identifier of the channel to be accessed (retrieved, deleted, modified, etc.)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SecurityToken|UsernameToken|Hash>] :security_tokens The security tokens to remove: each token must be specified in full to be removed, i.e., specifying only the username of a UsernamePassword token is insufficient.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_security_tokens_with_http_info(channel_uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelManagementApi.remove_security_tokens ...'
      end
      # verify the required parameter 'channel_uri' is set
      if @api_client.config.client_side_validation && channel_uri.nil?
        fail ArgumentError, "Missing the required parameter 'channel_uri' when calling ChannelManagementApi.remove_security_tokens"
      end
      if @api_client.config.client_side_validation && !opts[:'security_tokens'].nil? && opts[:'security_tokens'].length < 1
        fail ArgumentError, 'invalid value for "opts[:"security_tokens"]" when calling ChannelManagementApi.remove_security_tokens, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/channels/{channel-uri}/security-tokens'.sub('{' + 'channel-uri' + '}', CGI.escape(channel_uri.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'security_tokens'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['username_password']

      new_options = opts.merge(
        :operation => :"ChannelManagementApi.remove_security_tokens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelManagementApi#remove_security_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
