=begin
#ISBM 2.0

#An OpenAPI specification for the ISBM 2.0 RESTful interface.

The version of the OpenAPI document: 2.0
Contact: info@mimosa.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module ISBMRestAdaptor
  # Gets information about the supported operations and features of the ISBM service provider.
  class SupportedOperations
    attr_accessor :is_xml_filtering_enabled

    attr_accessor :is_json_filtering_enabled

    attr_accessor :supported_content_filtering_languages

    attr_accessor :supported_authentications

    attr_accessor :security_level_conformance

    attr_accessor :is_dead_lettering_enabled

    attr_accessor :is_channel_creation_enabled

    attr_accessor :is_open_channel_securing_enabled

    attr_accessor :is_whitelist_required

    # Duration as defined by XML Schema xs:duration, http://w3c.org/TR/xmlschema-2/#duration, or  null
    attr_accessor :default_expiry_duration

    attr_accessor :additional_information_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'is_xml_filtering_enabled' => :'isXMLFilteringEnabled',
        :'is_json_filtering_enabled' => :'isJSONFilteringEnabled',
        :'supported_content_filtering_languages' => :'supportedContentFilteringLanguages',
        :'supported_authentications' => :'supportedAuthentications',
        :'security_level_conformance' => :'securityLevelConformance',
        :'is_dead_lettering_enabled' => :'isDeadLetteringEnabled',
        :'is_channel_creation_enabled' => :'isChannelCreationEnabled',
        :'is_open_channel_securing_enabled' => :'isOpenChannelSecuringEnabled',
        :'is_whitelist_required' => :'isWhitelistRequired',
        :'default_expiry_duration' => :'defaultExpiryDuration',
        :'additional_information_url' => :'additionalInformationURL'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'is_xml_filtering_enabled' => :'Boolean',
        :'is_json_filtering_enabled' => :'Boolean',
        :'supported_content_filtering_languages' => :'SupportedOperationsSupportedContentFilteringLanguages',
        :'supported_authentications' => :'SupportedOperationsSupportedAuthentications',
        :'security_level_conformance' => :'Float',
        :'is_dead_lettering_enabled' => :'Boolean',
        :'is_channel_creation_enabled' => :'Boolean',
        :'is_open_channel_securing_enabled' => :'Boolean',
        :'is_whitelist_required' => :'Boolean',
        :'default_expiry_duration' => :'String',
        :'additional_information_url' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'default_expiry_duration',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ISBMRestAdaptor::SupportedOperations` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ISBMRestAdaptor::SupportedOperations`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'is_xml_filtering_enabled')
        self.is_xml_filtering_enabled = attributes[:'is_xml_filtering_enabled']
      end

      if attributes.key?(:'is_json_filtering_enabled')
        self.is_json_filtering_enabled = attributes[:'is_json_filtering_enabled']
      end

      if attributes.key?(:'supported_content_filtering_languages')
        self.supported_content_filtering_languages = attributes[:'supported_content_filtering_languages']
      end

      if attributes.key?(:'supported_authentications')
        self.supported_authentications = attributes[:'supported_authentications']
      end

      if attributes.key?(:'security_level_conformance')
        self.security_level_conformance = attributes[:'security_level_conformance']
      end

      if attributes.key?(:'is_dead_lettering_enabled')
        self.is_dead_lettering_enabled = attributes[:'is_dead_lettering_enabled']
      end

      if attributes.key?(:'is_channel_creation_enabled')
        self.is_channel_creation_enabled = attributes[:'is_channel_creation_enabled']
      end

      if attributes.key?(:'is_open_channel_securing_enabled')
        self.is_open_channel_securing_enabled = attributes[:'is_open_channel_securing_enabled']
      end

      if attributes.key?(:'is_whitelist_required')
        self.is_whitelist_required = attributes[:'is_whitelist_required']
      end

      if attributes.key?(:'default_expiry_duration')
        self.default_expiry_duration = attributes[:'default_expiry_duration']
      end

      if attributes.key?(:'additional_information_url')
        self.additional_information_url = attributes[:'additional_information_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @is_xml_filtering_enabled.nil?
        invalid_properties.push('invalid value for "is_xml_filtering_enabled", is_xml_filtering_enabled cannot be nil.')
      end

      if @is_json_filtering_enabled.nil?
        invalid_properties.push('invalid value for "is_json_filtering_enabled", is_json_filtering_enabled cannot be nil.')
      end

      if @supported_content_filtering_languages.nil?
        invalid_properties.push('invalid value for "supported_content_filtering_languages", supported_content_filtering_languages cannot be nil.')
      end

      if @supported_authentications.nil?
        invalid_properties.push('invalid value for "supported_authentications", supported_authentications cannot be nil.')
      end

      if @security_level_conformance.nil?
        invalid_properties.push('invalid value for "security_level_conformance", security_level_conformance cannot be nil.')
      end

      if @security_level_conformance > 4
        invalid_properties.push('invalid value for "security_level_conformance", must be smaller than or equal to 4.')
      end

      if @security_level_conformance < 1
        invalid_properties.push('invalid value for "security_level_conformance", must be greater than or equal to 1.')
      end

      if @is_dead_lettering_enabled.nil?
        invalid_properties.push('invalid value for "is_dead_lettering_enabled", is_dead_lettering_enabled cannot be nil.')
      end

      if @is_channel_creation_enabled.nil?
        invalid_properties.push('invalid value for "is_channel_creation_enabled", is_channel_creation_enabled cannot be nil.')
      end

      if @is_open_channel_securing_enabled.nil?
        invalid_properties.push('invalid value for "is_open_channel_securing_enabled", is_open_channel_securing_enabled cannot be nil.')
      end

      if @is_whitelist_required.nil?
        invalid_properties.push('invalid value for "is_whitelist_required", is_whitelist_required cannot be nil.')
      end

      pattern = Regexp.new(/[-]?P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+([.][0-9]+)?S)?)?/)
      if @default_expiry_duration && @default_expiry_duration !~ pattern
        invalid_properties.push("invalid value for \"default_expiry_duration\", must conform to the pattern #{pattern}.")
      end

      if @additional_information_url.nil?
        invalid_properties.push('invalid value for "additional_information_url", additional_information_url cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @is_xml_filtering_enabled.nil?
      return false if @is_json_filtering_enabled.nil?
      return false if @supported_content_filtering_languages.nil?
      return false if @supported_authentications.nil?
      return false if @security_level_conformance.nil?
      return false if @security_level_conformance > 4
      return false if @security_level_conformance < 1
      return false if @is_dead_lettering_enabled.nil?
      return false if @is_channel_creation_enabled.nil?
      return false if @is_open_channel_securing_enabled.nil?
      return false if @is_whitelist_required.nil?
      return false if @default_expiry_duration && @default_expiry_duration !~ Regexp.new(/[-]?P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+([.][0-9]+)?S)?)?/)
      return false if @additional_information_url.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] security_level_conformance Value to be assigned
    def security_level_conformance=(security_level_conformance)
      if security_level_conformance.nil?
        fail ArgumentError, 'security_level_conformance cannot be nil'
      end

      if security_level_conformance > 4
        fail ArgumentError, 'invalid value for "security_level_conformance", must be smaller than or equal to 4.'
      end

      if security_level_conformance < 1
        fail ArgumentError, 'invalid value for "security_level_conformance", must be greater than or equal to 1.'
      end

      @security_level_conformance = security_level_conformance
    end

    # Custom attribute writer method with validation
    # @param [Object] default_expiry_duration Value to be assigned
    def default_expiry_duration=(default_expiry_duration)
      pattern = Regexp.new(/[-]?P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+([.][0-9]+)?S)?)?/)
      if default_expiry_duration && default_expiry_duration !~ pattern
        fail ArgumentError, "invalid value for \"default_expiry_duration\", must conform to the pattern #{pattern}."
      end

      @default_expiry_duration = default_expiry_duration
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          is_xml_filtering_enabled == o.is_xml_filtering_enabled &&
          is_json_filtering_enabled == o.is_json_filtering_enabled &&
          supported_content_filtering_languages == o.supported_content_filtering_languages &&
          supported_authentications == o.supported_authentications &&
          security_level_conformance == o.security_level_conformance &&
          is_dead_lettering_enabled == o.is_dead_lettering_enabled &&
          is_channel_creation_enabled == o.is_channel_creation_enabled &&
          is_open_channel_securing_enabled == o.is_open_channel_securing_enabled &&
          is_whitelist_required == o.is_whitelist_required &&
          default_expiry_duration == o.default_expiry_duration &&
          additional_information_url == o.additional_information_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [is_xml_filtering_enabled, is_json_filtering_enabled, supported_content_filtering_languages, supported_authentications, security_level_conformance, is_dead_lettering_enabled, is_channel_creation_enabled, is_open_channel_securing_enabled, is_whitelist_required, default_expiry_duration, additional_information_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ISBMRestAdaptor.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
