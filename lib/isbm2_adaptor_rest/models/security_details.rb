=begin
#ISBM 2.0

#An OpenAPI specification for the ISBM 2.0 RESTful interface.

The version of the OpenAPI document: 2.0
Contact: info@mimosa.org
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module IsbmRestAdaptor
  # Gets the detailed security related information of the ISBM service provider.
  class SecurityDetails
    attr_accessor :is_tls_enabled

    attr_accessor :is_security_token_required

    attr_accessor :is_security_token_encryption_enabled

    attr_accessor :is_certificate_required

    attr_accessor :is_rbac_enabled

    attr_accessor :is_key_management_service_enabled

    attr_accessor :is_end_to_end_message_encryption_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'is_tls_enabled' => :'isTLSEnabled',
        :'is_security_token_required' => :'isSecurityTokenRequired',
        :'is_security_token_encryption_enabled' => :'isSecurityTokenEncryptionEnabled',
        :'is_certificate_required' => :'isCertificateRequired',
        :'is_rbac_enabled' => :'isRBACEnabled',
        :'is_key_management_service_enabled' => :'isKeyManagementServiceEnabled',
        :'is_end_to_end_message_encryption_enabled' => :'isEndToEndMessageEncryptionEnabled'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'is_tls_enabled' => :'Boolean',
        :'is_security_token_required' => :'Boolean',
        :'is_security_token_encryption_enabled' => :'Boolean',
        :'is_certificate_required' => :'Boolean',
        :'is_rbac_enabled' => :'Boolean',
        :'is_key_management_service_enabled' => :'Boolean',
        :'is_end_to_end_message_encryption_enabled' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IsbmRestAdaptor::SecurityDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IsbmRestAdaptor::SecurityDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'is_tls_enabled')
        self.is_tls_enabled = attributes[:'is_tls_enabled']
      end

      if attributes.key?(:'is_security_token_required')
        self.is_security_token_required = attributes[:'is_security_token_required']
      end

      if attributes.key?(:'is_security_token_encryption_enabled')
        self.is_security_token_encryption_enabled = attributes[:'is_security_token_encryption_enabled']
      end

      if attributes.key?(:'is_certificate_required')
        self.is_certificate_required = attributes[:'is_certificate_required']
      end

      if attributes.key?(:'is_rbac_enabled')
        self.is_rbac_enabled = attributes[:'is_rbac_enabled']
      end

      if attributes.key?(:'is_key_management_service_enabled')
        self.is_key_management_service_enabled = attributes[:'is_key_management_service_enabled']
      end

      if attributes.key?(:'is_end_to_end_message_encryption_enabled')
        self.is_end_to_end_message_encryption_enabled = attributes[:'is_end_to_end_message_encryption_enabled']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @is_tls_enabled.nil?
        invalid_properties.push('invalid value for "is_tls_enabled", is_tls_enabled cannot be nil.')
      end

      if @is_security_token_required.nil?
        invalid_properties.push('invalid value for "is_security_token_required", is_security_token_required cannot be nil.')
      end

      if @is_security_token_encryption_enabled.nil?
        invalid_properties.push('invalid value for "is_security_token_encryption_enabled", is_security_token_encryption_enabled cannot be nil.')
      end

      if @is_certificate_required.nil?
        invalid_properties.push('invalid value for "is_certificate_required", is_certificate_required cannot be nil.')
      end

      if @is_rbac_enabled.nil?
        invalid_properties.push('invalid value for "is_rbac_enabled", is_rbac_enabled cannot be nil.')
      end

      if @is_key_management_service_enabled.nil?
        invalid_properties.push('invalid value for "is_key_management_service_enabled", is_key_management_service_enabled cannot be nil.')
      end

      if @is_end_to_end_message_encryption_enabled.nil?
        invalid_properties.push('invalid value for "is_end_to_end_message_encryption_enabled", is_end_to_end_message_encryption_enabled cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @is_tls_enabled.nil?
      return false if @is_security_token_required.nil?
      return false if @is_security_token_encryption_enabled.nil?
      return false if @is_certificate_required.nil?
      return false if @is_rbac_enabled.nil?
      return false if @is_key_management_service_enabled.nil?
      return false if @is_end_to_end_message_encryption_enabled.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          is_tls_enabled == o.is_tls_enabled &&
          is_security_token_required == o.is_security_token_required &&
          is_security_token_encryption_enabled == o.is_security_token_encryption_enabled &&
          is_certificate_required == o.is_certificate_required &&
          is_rbac_enabled == o.is_rbac_enabled &&
          is_key_management_service_enabled == o.is_key_management_service_enabled &&
          is_end_to_end_message_encryption_enabled == o.is_end_to_end_message_encryption_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [is_tls_enabled, is_security_token_required, is_security_token_encryption_enabled, is_certificate_required, is_rbac_enabled, is_key_management_service_enabled, is_end_to_end_message_encryption_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IsbmRestAdaptor.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
